{"version":3,"sources":["components/layout/Header.js","components/AddTodo.js","components/TodoItem.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","AddTodo","state","title","onChange","e","setState","target","name","value","onSubmit","preventDefault","alert","props","addTodo","this","autoFocus","type","placeholder","aria-label","aria-describedby","id","Component","TodoItem","getStyle","textDecoration","todo","isCompleted","style","markComplete","bind","checked","onClick","deleteTodo","Todo","todos","map","key","App","time","Date","toLocaleString","filter","length","addNewTodo","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acb1077e.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n    return (\n        <header>\n            <h1 className=\"text-center bg-dark text-white p-3\">To-Do-App</h1>\n        </header>\n    );\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n\n    state = {\n        title: ''\n    }\n\n    onChange = (e) => { this.setState({ [e.target.name]: e.target.value }); }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.title === '') {\n            alert('Add To-Do Field cannot be empty.');\n        }\n        else {\n            this.props.addTodo(this.state.title);\n            this.setState({ title: '' });\n        }\n    }\n\n    render() {\n        return (\n            <form onSubmit={this.onSubmit}>\n                <div className=\"input-group mb-3 pt-2 pl-4 pr-4\">\n                    <input\n                        autoFocus\n                        type=\"text\"\n                        name=\"title\"\n                        value={this.state.title}\n                        className=\"form-control\"\n                        placeholder=\"Add To-Do\"\n                        aria-label=\"Recipient's username\"\n                        aria-describedby=\"button-addon2\"\n                        onChange={this.onChange}\n                    />\n                    <div className=\"input-group-append\">\n                        <button className=\"btn btn-secondary\" type=\"submit\" id=\"button-addon2\">Add ToDo</button>\n                    </div>\n                </div>\n            </form>\n\n        );\n    }\n}\n\nexport default AddTodo;","import React, { Component } from 'react';\n\nclass TodoItem extends Component {\n\n    getStyle = () => {\n        return {\n            textDecoration: this.props.todo.isCompleted ? 'line-through' : 'none'\n        }\n    }\n\n    render() {\n        return (\n            <div style={this.getStyle()} className=\"text-capitalize bg-light p-4 m-2\">\n                <input\n                    type=\"checkbox\"\n                    onChange={this.props.markComplete.bind(this, this.props.todo.id)}\n                    checked={this.props.todo.isCompleted}\n                />\n                {' '}\n                {this.props.todo.title}\n                {' '}\n                <button\n                    type=\"button\"\n                    onClick={this.props.deleteTodo.bind(this, this.props.todo.id)}\n                    className=\"btn btn-outline-danger btn-sm float-right\"\n                >\n                    Delete To-Do\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default TodoItem;","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nclass Todo extends Component {\n\n    render() {\n        return this.props.todos.map(\n            (todo) => <TodoItem\n                key={todo.id}\n                todo={todo}\n                markComplete={this.props.markComplete}\n                deleteTodo={this.props.deleteTodo}\n            />\n        );\n    }\n}\n\nexport default Todo;","import React from 'react';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport Todo from './components/Todo';\n\nclass App extends React.Component {\n\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: 'hello world',\n        time: new Date().toLocaleString(),\n        isCompleted: false\n      },\n      {\n        id: 2,\n        title: 'hello owlrd length',\n        time: new Date().toLocaleString(),\n        isCompleted: true\n      },\n      {\n        id: 3,\n        title: 'longer lenth lkadsflkhjadfsklj',\n        time: new Date().toLocaleString(),\n        isCompleted: false\n      }\n    ]\n  }\n\n  //To-Do-Completed event or not\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.isCompleted = !todo.isCompleted;\n        }\n        return todo;\n      })\n    });\n  }\n\n  //Delete To-Do Item\n  deleteTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] });\n  }\n\n  //addTodo - adding Todo\n  addTodo = (title) => {\n    if (this.state.todos.length === 0) {\n      const addNewTodo = {\n        id: 1,\n        title: title,\n        isCompleted: false\n      }\n      this.setState({ todos: [...this.state.todos, addNewTodo] });\n    }\n    else {\n      const addNewTodo = {\n        id: this.state.todos[this.state.todos.length - 1].id + 1,\n        title: title,\n        isCompleted: false\n      }\n      this.setState({ todos: [...this.state.todos, addNewTodo] });\n    }\n  }\n\n  render() {\n    return (\n      <div >\n        <Header />\n        <AddTodo addTodo={this.addTodo} />\n        <Todo\n          todos={this.state.todos}\n          markComplete={this.markComplete}\n          deleteTodo={this.deleteTodo}\n        />\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}